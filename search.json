[
  {
    "objectID": "slides/2025-01-31_tdd_presentation.html",
    "href": "slides/2025-01-31_tdd_presentation.html",
    "title": "Test-Driven Development [TDD]",
    "section": "",
    "text": "A software development approach where unit-test code is written before functionality.\nFollow the Red-Green-Refactor cycle:\n\nRed: Write a failing test.\nGreen: Write the minimum code necessary to pass the test.\nRefactor: Improve the code while ensuring tests still pass.",
    "crumbs": [
      "Test-Driven Development [TDD]"
    ]
  },
  {
    "objectID": "slides/2025-01-31_tdd_presentation.html#step-1-write-a-test-red-phase",
    "href": "slides/2025-01-31_tdd_presentation.html#step-1-write-a-test-red-phase",
    "title": "Test-Driven Development [TDD]",
    "section": "Step 1: Write a Test (Red Phase)",
    "text": "Step 1: Write a Test (Red Phase)\n\nIdentify a small, testable unit of functionality.\nWrite a test that asserts the expected behavior.\nRun the test (it should fail since the implementation doesn‚Äôt exist yet).\n\n\nimport pytest\n\ndef test_addition():\n    assert add(2, 3) == 5  # Function doesn't exist yet",
    "crumbs": [
      "Test-Driven Development [TDD]"
    ]
  },
  {
    "objectID": "slides/2025-01-31_tdd_presentation.html#step-2-write-minimal-code-to-pass-the-test-green-phase",
    "href": "slides/2025-01-31_tdd_presentation.html#step-2-write-minimal-code-to-pass-the-test-green-phase",
    "title": "Test-Driven Development [TDD]",
    "section": "Step 2: Write Minimal Code to Pass the Test (Green Phase)",
    "text": "Step 2: Write Minimal Code to Pass the Test (Green Phase)\n\nImplement only the necessary code to make the test pass.\n\n\ndef add(a, b):\n    return a + b\n\n\nRun the test again (it should pass now).",
    "crumbs": [
      "Test-Driven Development [TDD]"
    ]
  },
  {
    "objectID": "slides/2025-01-31_tdd_presentation.html#step-3-refactor-the-code-refactor-phase",
    "href": "slides/2025-01-31_tdd_presentation.html#step-3-refactor-the-code-refactor-phase",
    "title": "Test-Driven Development [TDD]",
    "section": "Step 3: Refactor the Code (Refactor Phase)",
    "text": "Step 3: Refactor the Code (Refactor Phase)\n\nClean up the implementation without changing behavior.\nEnsure all tests still pass after refactoring.\n\n\ndef add(a: int, b: int) -&gt; int:\n    return a + b  # Adding types",
    "crumbs": [
      "Test-Driven Development [TDD]"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html",
    "href": "slides/2025-02-11_pr_practices.html",
    "title": "GitHub Best Practices",
    "section": "",
    "text": "A pull request is a request for someone‚Äôs time and expertise. Be respectful of that by making your PR as clear, concise and well-prepared as possible.",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html#enable-branch-protection-rules",
    "href": "slides/2025-02-11_pr_practices.html#enable-branch-protection-rules",
    "title": "GitHub Best Practices",
    "section": "Enable branch protection rules",
    "text": "Enable branch protection rules\n\nProtect main (and any other long-lived branches)\nRequire pull requests before merging\nRequire minimum 1 approving review\nEnforce status checks (CI/CD pipelines, linting, tests)",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html#github-flow",
    "href": "slides/2025-02-11_pr_practices.html#github-flow",
    "title": "GitHub Best Practices",
    "section": "GitHub Flow",
    "text": "GitHub Flow\n\nOne long-lived branch: main\nfeature branch ‚Üí PR ‚Üí Merge to main\nSimple\nBest for continuous delivery\nDeploy immediately after merge to main",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html#gitflow",
    "href": "slides/2025-02-11_pr_practices.html#gitflow",
    "title": "GitHub Best Practices",
    "section": "GitFlow",
    "text": "GitFlow\n\nLong-lived branches: main, develop\nShort-lived branches: release, hotfix, feature\nfeature branch -&gt; PR -&gt; Merge to develop\nrelease branch or hotfix -&gt; PR -&gt; Merge to main and develop\nBetter for large-scale projects, many devs, scheduled releases",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html#what-makes-a-pr-bad",
    "href": "slides/2025-02-11_pr_practices.html#what-makes-a-pr-bad",
    "title": "GitHub Best Practices",
    "section": "üö´ What makes a PR bad?",
    "text": "üö´ What makes a PR bad?\n\nLarge & difficult to review\nMany unrelated changes\nPoor or no description\nUnclear commit history\nFails CI/CD checks\nLacks necessary tests",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html#how-to-improve-prs",
    "href": "slides/2025-02-11_pr_practices.html#how-to-improve-prs",
    "title": "GitHub Best Practices",
    "section": "‚úÖ How to improve PRs",
    "text": "‚úÖ How to improve PRs\n\nKeep PRs small and focused\nProvide a clear summary & context\nWrite meaningful commit messages\nEnsure automated checks pass before requesting review\nAdd relevant tests & documentation\nExplain how a reviewer can test your changes",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html#common-bad-practices",
    "href": "slides/2025-02-11_pr_practices.html#common-bad-practices",
    "title": "GitHub Best Practices",
    "section": "üö´ Common bad practices",
    "text": "üö´ Common bad practices\n\nSuperficial LGTM approvals\nExcessively nitpicky comments\nReview lacks a clear status (ie. ‚ÄúApproved‚Äù, ‚ÄúRequest Changes‚Äù, ‚ÄúClose Recommendation‚Äù)",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html#how-to-review-effectively",
    "href": "slides/2025-02-11_pr_practices.html#how-to-review-effectively",
    "title": "GitHub Best Practices",
    "section": "‚úÖ How to review effectively",
    "text": "‚úÖ How to review effectively\n\nClearly state your status: ‚ÄúApproved‚Äù, ‚ÄúRequest Changes‚Äù, ‚ÄúClose Recommendation‚Äù\nNitpicky or non-blocking comments should be clearly marked\nBe constructive and specific\nValidate logic, security, performance\nCheck for coding standards and test coverage\nEnsure documentation is updated when necessary",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This page hosts all slides for presentations given during SPD‚Äôs Brinner and Learn series.\nEach chapter title to the left is a link to a slide deck.\n\nThese slides are being developed by the SPD team.\nEach deck will open in its own tab.\nYou may want to type ‚Äús‚Äù at the start of each deck to open the speaker notes.\nSome of these slides may end up being adopted as a more formal SPD practice.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "slides/2025-03-11_tickets.html",
    "href": "slides/2025-03-11_tickets.html",
    "title": "Effective Ticketing & the Definition of Done",
    "section": "",
    "text": "A good ticket should umambiguously transfer as much relevant context from your brain onto the ticket in the simplest and most concise way possible.",
    "crumbs": [
      "Effective Ticketing & the Definition of Done"
    ]
  },
  {
    "objectID": "slides/2025-03-11_tickets.html#feature-tickets",
    "href": "slides/2025-03-11_tickets.html#feature-tickets",
    "title": "Effective Ticketing & the Definition of Done",
    "section": "Feature Tickets",
    "text": "Feature Tickets\n\nFor features, try to include a user story:\n\ne.g.¬†‚ÄúAs a registered user, I might forget my password and want to regain access to my account securely.‚Äù\n\nWhen possible, supplement the user story with unambiguous acceptance criteria",
    "crumbs": [
      "Effective Ticketing & the Definition of Done"
    ]
  },
  {
    "objectID": "slides/2025-03-11_tickets.html#bug-tickets",
    "href": "slides/2025-03-11_tickets.html#bug-tickets",
    "title": "Effective Ticketing & the Definition of Done",
    "section": "Bug Tickets",
    "text": "Bug Tickets\n\nFor bugs, be as detailed as possible!\n\nOften the limiting factor for fixing a bug is reproducing it.\n\nFor example:\n\nEnvironment setup (OS, browser, app version, etc.)\nReproduction Steps (What precise actions lead to the bug?)\nExpected behaviour (What should have happened?)\nActual behaviour (What actually happened?)\nScreenshots, logs, etc.",
    "crumbs": [
      "Effective Ticketing & the Definition of Done"
    ]
  },
  {
    "objectID": "slides/2025-03-11_tickets.html#acceptance-criteria",
    "href": "slides/2025-03-11_tickets.html#acceptance-criteria",
    "title": "Effective Ticketing & the Definition of Done",
    "section": "Acceptance Criteria",
    "text": "Acceptance Criteria\n\nWhat must be true for the issue to be considered complete?\n\nWritten as bullet points\nExample",
    "crumbs": [
      "Effective Ticketing & the Definition of Done"
    ]
  },
  {
    "objectID": "slides/2025-03-11_tickets.html#definition-of-done",
    "href": "slides/2025-03-11_tickets.html#definition-of-done",
    "title": "Effective Ticketing & the Definition of Done",
    "section": "Definition of Done:",
    "text": "Definition of Done:\n\nAll acceptance criteria are met\nTests and checks pass\nDocumentation is updated when relevant\nCode is reviewed and merged!",
    "crumbs": [
      "Effective Ticketing & the Definition of Done"
    ]
  },
  {
    "objectID": "slides/2025-03-11_tickets.html#setup",
    "href": "slides/2025-03-11_tickets.html#setup",
    "title": "Effective Ticketing & the Definition of Done",
    "section": "Setup",
    "text": "Setup\nbrew install gh  # macOS\n``\n\n### Authenticating\n``\ngh auth login\n``\n\n### Cloning a Repo\n```sh\ngh repo clone RMI/web-api-poc\n\nChecking out a PR locally\ngh pr checkout 14",
    "crumbs": [
      "Effective Ticketing & the Definition of Done"
    ]
  },
  {
    "objectID": "slides/2025-03-11_tickets.html#recap",
    "href": "slides/2025-03-11_tickets.html#recap",
    "title": "Effective Ticketing & the Definition of Done",
    "section": "Recap",
    "text": "Recap\n\nWrite clear, structured tickets\nDefine acceptance criteria & done criteria\nUse meaningful feature branch names\ngh CLI simplifies GitHub workflows\n\nQuestions?",
    "crumbs": [
      "Effective Ticketing & the Definition of Done"
    ]
  }
]