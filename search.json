[
  {
    "objectID": "slides/2025-01-31_tdd_presentation.html#step-1-write-a-test-red-phase",
    "href": "slides/2025-01-31_tdd_presentation.html#step-1-write-a-test-red-phase",
    "title": "Test-Driven Development [TDD]",
    "section": "Step 1: Write a Test (Red Phase)",
    "text": "Step 1: Write a Test (Red Phase)\n\nIdentify a small, testable unit of functionality.\nWrite a test that asserts the expected behavior.\nRun the test (it should fail since the implementation doesn’t exist yet).\n\n\nimport pytest\n\ndef test_addition():\n    assert add(2, 3) == 5  # Function doesn't exist yet",
    "crumbs": [
      "Test-Driven Development [TDD]"
    ]
  },
  {
    "objectID": "slides/2025-01-31_tdd_presentation.html#step-2-write-minimal-code-to-pass-the-test-green-phase",
    "href": "slides/2025-01-31_tdd_presentation.html#step-2-write-minimal-code-to-pass-the-test-green-phase",
    "title": "Test-Driven Development [TDD]",
    "section": "Step 2: Write Minimal Code to Pass the Test (Green Phase)",
    "text": "Step 2: Write Minimal Code to Pass the Test (Green Phase)\n\nImplement only the necessary code to make the test pass.\n\n\ndef add(a, b):\n    return a + b\n\n\nRun the test again (it should pass now).",
    "crumbs": [
      "Test-Driven Development [TDD]"
    ]
  },
  {
    "objectID": "slides/2025-01-31_tdd_presentation.html#step-3-refactor-the-code-refactor-phase",
    "href": "slides/2025-01-31_tdd_presentation.html#step-3-refactor-the-code-refactor-phase",
    "title": "Test-Driven Development [TDD]",
    "section": "Step 3: Refactor the Code (Refactor Phase)",
    "text": "Step 3: Refactor the Code (Refactor Phase)\n\nClean up the implementation without changing behavior.\nEnsure all tests still pass after refactoring.\n\n\ndef add(a: int, b: int) -&gt; int:\n    return a + b  # Adding types",
    "crumbs": [
      "Test-Driven Development [TDD]"
    ]
  },
  {
    "objectID": "slides/2025-03-11_tickets.html#feature-tickets",
    "href": "slides/2025-03-11_tickets.html#feature-tickets",
    "title": "Effective Ticketing & the Definition of Done",
    "section": "Feature Tickets",
    "text": "Feature Tickets\n\nFor features, try to include a user story:\n\ne.g. “As a registered user, I might forget my password and want to regain access to my account securely.”\n\nWhen possible, supplement the user story with unambiguous acceptance criteria",
    "crumbs": [
      "Effective Ticketing & the Definition of Done"
    ]
  },
  {
    "objectID": "slides/2025-03-11_tickets.html#bug-tickets",
    "href": "slides/2025-03-11_tickets.html#bug-tickets",
    "title": "Effective Ticketing & the Definition of Done",
    "section": "Bug Tickets",
    "text": "Bug Tickets\n\nFor bugs, be as detailed as possible!\n\nOften the limiting factor for fixing a bug is reproducing it.\n\nFor example:\n\nEnvironment setup (OS, browser, app version, etc.)\nReproduction Steps (What precise actions lead to the bug?)\nExpected behaviour (What should have happened?)\nActual behaviour (What actually happened?)\nScreenshots, logs, etc.",
    "crumbs": [
      "Effective Ticketing & the Definition of Done"
    ]
  },
  {
    "objectID": "slides/2025-03-11_tickets.html#acceptance-criteria",
    "href": "slides/2025-03-11_tickets.html#acceptance-criteria",
    "title": "Effective Ticketing & the Definition of Done",
    "section": "Acceptance Criteria",
    "text": "Acceptance Criteria\n\nWhat must be true for the issue to be considered complete?\n\nWritten as bullet points\nExample",
    "crumbs": [
      "Effective Ticketing & the Definition of Done"
    ]
  },
  {
    "objectID": "slides/2025-03-11_tickets.html#definition-of-done",
    "href": "slides/2025-03-11_tickets.html#definition-of-done",
    "title": "Effective Ticketing & the Definition of Done",
    "section": "Definition of Done:",
    "text": "Definition of Done:\n\nAll acceptance criteria are met\nTests and checks pass\nDocumentation is updated when relevant\nCode is reviewed and merged!",
    "crumbs": [
      "Effective Ticketing & the Definition of Done"
    ]
  },
  {
    "objectID": "slides/2025-03-11_tickets.html#setup",
    "href": "slides/2025-03-11_tickets.html#setup",
    "title": "Effective Ticketing & the Definition of Done",
    "section": "Setup",
    "text": "Setup\nbrew install gh  # macOS\n``\n\n### Authenticating\n``\ngh auth login\n``\n\n### Cloning a Repo\n```sh\ngh repo clone RMI/web-api-poc\nChecking out a PR locally\ngh pr checkout 14",
    "crumbs": [
      "Effective Ticketing & the Definition of Done"
    ]
  },
  {
    "objectID": "slides/2025-03-11_tickets.html#recap",
    "href": "slides/2025-03-11_tickets.html#recap",
    "title": "Effective Ticketing & the Definition of Done",
    "section": "Recap",
    "text": "Recap\n\nWrite clear, structured tickets\nDefine acceptance criteria & done criteria\nUse meaningful feature branch names\ngh CLI simplifies GitHub workflows\n\nQuestions?",
    "crumbs": [
      "Effective Ticketing & the Definition of Done"
    ]
  },
  {
    "objectID": "slides/2025-05-06_12FactorPt1.html#motivation",
    "href": "slides/2025-05-06_12FactorPt1.html#motivation",
    "title": "12 Factor Applications (Pt 1)",
    "section": "Motivation",
    "text": "Motivation\n\nDeveloping and Deploying Apps can be difficult\nThe 12 Factor App methodology provides guidelines that ensure\n\nclarity,\nscalability,\nmaintainability\n\nBenefits both developers and operations teams."
  },
  {
    "objectID": "slides/2025-05-06_12FactorPt1.html#why-are-12-factor-apps-important",
    "href": "slides/2025-05-06_12FactorPt1.html#why-are-12-factor-apps-important",
    "title": "12 Factor Applications (Pt 1)",
    "section": "Why are 12 Factor Apps Important?",
    "text": "Why are 12 Factor Apps Important?\n\nConsistency and predictability in application behavior.\nSimplifies the development lifecycle.\nEases the process of deploying, scaling, and maintaining applications.\nPromotes collaboration between development and operations (DevOps)."
  },
  {
    "objectID": "slides/2025-05-06_12FactorPt1.html#best-practices",
    "href": "slides/2025-05-06_12FactorPt1.html#best-practices",
    "title": "12 Factor Applications (Pt 1)",
    "section": "Best Practices",
    "text": "Best Practices\nA lot of these concepts are things that are considered best practices, but collected together.\n\nYou are probably already do a bunch of these things\nYou may not know you do it (it just feels right)\nYou may not know why you do it (it just seems to work)\nYou may do it because you were told to (it isn’t broken)"
  },
  {
    "objectID": "slides/2025-05-06_12FactorPt1.html#benefits-for-developers",
    "href": "slides/2025-05-06_12FactorPt1.html#benefits-for-developers",
    "title": "12 Factor Applications (Pt 1)",
    "section": "Benefits for Developers",
    "text": "Benefits for Developers\n\nClear guidelines for application structure and behavior.\nSimplified onboarding and reduced cognitive load.\nEasier debugging and local development.\nPredictable dependencies and environments."
  },
  {
    "objectID": "slides/2025-05-06_12FactorPt1.html#benefits-for-devopsoperations",
    "href": "slides/2025-05-06_12FactorPt1.html#benefits-for-devopsoperations",
    "title": "12 Factor Applications (Pt 1)",
    "section": "Benefits for DevOps/Operations",
    "text": "Benefits for DevOps/Operations\n\nStreamlined deployment and automated management.\nImproved reliability and faster issue resolution.\nEasier monitoring and logging."
  },
  {
    "objectID": "slides/2025-05-06_12FactorPt1.html#the-12-factors-brief-overview",
    "href": "slides/2025-05-06_12FactorPt1.html#the-12-factors-brief-overview",
    "title": "12 Factor Applications (Pt 1)",
    "section": "The 12 Factors (Brief Overview)",
    "text": "The 12 Factors (Brief Overview)\n\nCodebase: One codebase tracked in version control, many deploys.\nDependencies: Explicitly declare and isolate dependencies.\nConfig: Store configuration in the environment.\nBacking Services: Treat backing services as attached resources.\nBuild, Release, Run: Strictly separate build and run stages.\nProcesses: Execute the app as one or more stateless processes."
  },
  {
    "objectID": "slides/2025-05-06_12FactorPt1.html#the-12-factors-brief-overview-1",
    "href": "slides/2025-05-06_12FactorPt1.html#the-12-factors-brief-overview-1",
    "title": "12 Factor Applications (Pt 1)",
    "section": "The 12 Factors (Brief Overview)",
    "text": "The 12 Factors (Brief Overview)\n\nPort Binding: Export services via port binding.\nConcurrency: Scale out via the process model.\nDisposability: Maximize robustness with fast startup and graceful shutdown.\nDev/Prod Parity: Keep development, staging, and production similar.\nLogs: Treat logs as event streams.\nAdmin Processes: Run admin tasks as one-off processes."
  },
  {
    "objectID": "slides/2025-05-06_12FactorPt1.html#examples-of-common-pitfalls",
    "href": "slides/2025-05-06_12FactorPt1.html#examples-of-common-pitfalls",
    "title": "12 Factor Applications (Pt 1)",
    "section": "Examples of Common Pitfalls",
    "text": "Examples of Common Pitfalls\n\nConfiguration hardcoded in source code.\nDependencies not clearly defined or versioned.\nStateful processes causing unpredictable behavior.\nSignificant differences between development and production environments."
  },
  {
    "objectID": "slides/2025-05-06_12FactorPt1.html#getting-started-with-12-factor-apps",
    "href": "slides/2025-05-06_12FactorPt1.html#getting-started-with-12-factor-apps",
    "title": "12 Factor Applications (Pt 1)",
    "section": "Getting Started with 12 Factor Apps",
    "text": "Getting Started with 12 Factor Apps\n\nReview your current projects against the 12 factors.\nIncrementally adopt factors as you enhance or refactor projects.\nFoster collaboration and awareness across development and operations teams."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This page hosts all slides for presentations given during SPD’s Brinner and Learn series.\nEach chapter title to the left is a link to a slide deck.\n\nThese slides are being developed by the SPD team.\nEach deck will open in its own tab.\nYou may want to type “s” at the start of each deck to open the speaker notes.\nSome of these slides may end up being adopted as a more formal SPD practice.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html#enable-branch-protection-rules",
    "href": "slides/2025-02-11_pr_practices.html#enable-branch-protection-rules",
    "title": "GitHub Best Practices",
    "section": "Enable branch protection rules",
    "text": "Enable branch protection rules\n\nProtect main (and any other long-lived branches)\nRequire pull requests before merging\nRequire minimum 1 approving review\nEnforce status checks (CI/CD pipelines, linting, tests)",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html#github-flow",
    "href": "slides/2025-02-11_pr_practices.html#github-flow",
    "title": "GitHub Best Practices",
    "section": "GitHub Flow",
    "text": "GitHub Flow\n\nOne long-lived branch: main\nfeature branch → PR → Merge to main\nSimple\nBest for continuous delivery\nDeploy immediately after merge to main",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html#gitflow",
    "href": "slides/2025-02-11_pr_practices.html#gitflow",
    "title": "GitHub Best Practices",
    "section": "GitFlow",
    "text": "GitFlow\n\nLong-lived branches: main, develop\nShort-lived branches: release, hotfix, feature\nfeature branch -&gt; PR -&gt; Merge to develop\nrelease branch or hotfix -&gt; PR -&gt; Merge to main and develop\nBetter for large-scale projects, many devs, scheduled releases",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html#what-makes-a-pr-bad",
    "href": "slides/2025-02-11_pr_practices.html#what-makes-a-pr-bad",
    "title": "GitHub Best Practices",
    "section": "🚫 What makes a PR bad?",
    "text": "🚫 What makes a PR bad?\n\nLarge & difficult to review\nMany unrelated changes\nPoor or no description\nUnclear commit history\nFails CI/CD checks\nLacks necessary tests",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html#how-to-improve-prs",
    "href": "slides/2025-02-11_pr_practices.html#how-to-improve-prs",
    "title": "GitHub Best Practices",
    "section": "✅ How to improve PRs",
    "text": "✅ How to improve PRs\n\nKeep PRs small and focused\nProvide a clear summary & context\nWrite meaningful commit messages\nEnsure automated checks pass before requesting review\nAdd relevant tests & documentation\nExplain how a reviewer can test your changes",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html#common-bad-practices",
    "href": "slides/2025-02-11_pr_practices.html#common-bad-practices",
    "title": "GitHub Best Practices",
    "section": "🚫 Common bad practices",
    "text": "🚫 Common bad practices\n\nSuperficial LGTM approvals\nExcessively nitpicky comments\nReview lacks a clear status (ie. “Approved”, “Request Changes”, “Close Recommendation”)",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "slides/2025-02-11_pr_practices.html#how-to-review-effectively",
    "href": "slides/2025-02-11_pr_practices.html#how-to-review-effectively",
    "title": "GitHub Best Practices",
    "section": "✅ How to review effectively",
    "text": "✅ How to review effectively\n\nClearly state your status: “Approved”, “Request Changes”, “Close Recommendation”\nNitpicky or non-blocking comments should be clearly marked\nBe constructive and specific\nValidate logic, security, performance\nCheck for coding standards and test coverage\nEnsure documentation is updated when necessary",
    "crumbs": [
      "GitHub Best Practices"
    ]
  },
  {
    "objectID": "slides/2025-04-24_python_testing_101.html#what-is-a-unit-test",
    "href": "slides/2025-04-24_python_testing_101.html#what-is-a-unit-test",
    "title": "Python Testing 101: Writing Your First Unit Tests",
    "section": "What is a Unit Test?",
    "text": "What is a Unit Test?\n\nA unit test checks that a small unit of code works as expected.\nUsually a single function or method.\nHelps you catch bugs early, refactor confidently, and build better software."
  },
  {
    "objectID": "slides/2025-04-24_python_testing_101.html#why-should-data-scientists-care",
    "href": "slides/2025-04-24_python_testing_101.html#why-should-data-scientists-care",
    "title": "Python Testing 101: Writing Your First Unit Tests",
    "section": "Why Should Data Scientists Care?",
    "text": "Why Should Data Scientists Care?\n\nPrevent breaking your analysis pipeline accidentally.\nAdd guardrails for complex logic (e.g., custom transforms).\nMake code easier to reuse and maintain."
  },
  {
    "objectID": "slides/2025-04-24_python_testing_101.html#unit-testing-workflow",
    "href": "slides/2025-04-24_python_testing_101.html#unit-testing-workflow",
    "title": "Python Testing 101: Writing Your First Unit Tests",
    "section": "Unit Testing Workflow",
    "text": "Unit Testing Workflow\n\nWrite failing test -&gt; Run with pytest (It should fail)\nWrite just enough code to pass -&gt; Re-run pytest\nSee it pass 🎉\nRefactor code if needed\nRepeat 🔁"
  },
  {
    "objectID": "slides/2025-04-24_python_testing_101.html#best-practices",
    "href": "slides/2025-04-24_python_testing_101.html#best-practices",
    "title": "Python Testing 101: Writing Your First Unit Tests",
    "section": "Best Practices",
    "text": "Best Practices\n\n🧪 Test one case per test, keep them small!\n🔁 Test edge cases and common use\n🧼 Use clear naming: test_functionname_case\n📦 Structure code so logic is in testable functions (not in notebooks!)"
  },
  {
    "objectID": "slides/2025-04-24_python_testing_101.html#code-structure-for-testing",
    "href": "slides/2025-04-24_python_testing_101.html#code-structure-for-testing",
    "title": "Python Testing 101: Writing Your First Unit Tests",
    "section": "Code Structure for Testing",
    "text": "Code Structure for Testing\nBefore testing: - Your code should live in a .py file, e.g. my_module.py - Tests should go in a separate file: test_my_module.py\nproject/\n├── my_module.py\n├── test_my_module.py"
  },
  {
    "objectID": "slides/2025-04-24_python_testing_101.html#lets-write-a-failing-test",
    "href": "slides/2025-04-24_python_testing_101.html#lets-write-a-failing-test",
    "title": "Python Testing 101: Writing Your First Unit Tests",
    "section": "Let’s Write a Failing Test",
    "text": "Let’s Write a Failing Test\ntest_my_module.py:\nfrom my_module import multiply_by_two\n\ndef test_multiply_by_two():\n    assert multiply_by_two(3) == 6"
  },
  {
    "objectID": "slides/2025-04-24_python_testing_101.html#run-it-with-pytest",
    "href": "slides/2025-04-24_python_testing_101.html#run-it-with-pytest",
    "title": "Python Testing 101: Writing Your First Unit Tests",
    "section": "Run it with pytest",
    "text": "Run it with pytest\npytest\nExpect output like:\n&gt;       assert multiply_by_two(3) == 6\nE       NameError: name 'multiply_by_two' is not defined\n⬆️ Good! The test is failing as expected."
  },
  {
    "objectID": "slides/2025-04-24_python_testing_101.html#write-just-enough-code-to-pass",
    "href": "slides/2025-04-24_python_testing_101.html#write-just-enough-code-to-pass",
    "title": "Python Testing 101: Writing Your First Unit Tests",
    "section": "Write Just Enough Code to Pass",
    "text": "Write Just Enough Code to Pass\nmy_module.py:\ndef multiply_by_two(x):\n    return x * 2\nRe-run pytest:\ncollected 1 item\ntest_my_module.py .                                    [100%]\n✅ Green means good!"
  },
  {
    "objectID": "slides/2025-04-24_python_testing_101.html#common-anti-patterns-to-avoid",
    "href": "slides/2025-04-24_python_testing_101.html#common-anti-patterns-to-avoid",
    "title": "Python Testing 101: Writing Your First Unit Tests",
    "section": "Common Anti-Patterns to Avoid",
    "text": "Common Anti-Patterns to Avoid\n🚫 Too much in one test - Hard to precisely understand what failed and why\n🚫 Testing implementation details - Tests should focus on what your function does and outputs, not how it does it\n🚫 Skipping tests for ‘just a script’ - Scripts evolve fast — Make testable functions early and part of your default workflow\n🚫 Functions that are hard to test - If a function: - Has side effects - Does too many things - Depends on global state\n➡️ It might need to be split into smaller pieces\n💡 If it’s hard to write a simple test, your function may need refactoring!"
  },
  {
    "objectID": "slides/2025-04-24_python_testing_101.html#whats-next",
    "href": "slides/2025-04-24_python_testing_101.html#whats-next",
    "title": "Python Testing 101: Writing Your First Unit Tests",
    "section": "What’s Next?",
    "text": "What’s Next?\n\nTry testing:\n\nEdge cases (0, negative numbers, empty lists, incorrect input types)\nYour own utility functions\n\nExplore:\n\nTest coverage (pytest-cov)\nMocks and temporary files"
  }
]